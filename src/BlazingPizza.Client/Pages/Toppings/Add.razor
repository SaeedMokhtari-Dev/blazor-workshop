@page "/toppings/create"
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.Extensions.Logging
@attribute [Authorize(Roles = "Admin")]
@inject ToppingsClient _toppingsClient;
@inject NavigationManager NavigationManager;  
@inject SweetAlertService Swal;
@inject ILogger<Add> Logger;
  
<div class="main">
<h1>Create</h1>  
<hr />  
<div class="row">
    <EditForm Model="@topping" OnValidSubmit="@CreateTopping">
        <DataAnnotationsValidator />
        <ValidationSummary />
    
        <div class="form-group">
            <label asp-for="name" class="control-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="@topping.Name"/>
        </div>
        <div class="form-group">
            <label asp-for="Price" class="control-label">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="@topping.Price"/>
        </div>
    
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Save</button>
        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
    </EditForm>
</div>  
  </div>
@functions {  
    private bool isSubmitting=false;
    Topping topping = new();  
    async Task CreateTopping()
    {
        isSubmitting = true;
        try
        {
            //await jsRuntime.InvokeAsync<string>("console.log", $"{topping.Id + " " + topping.Name + " " + topping.Price}");
            //Console.WriteLine($"{topping.Id + " " + topping.Name + " " + topping.Price}");
            Logger.LogInformation($"CreateTopping called {topping.Id + " " + topping.Name + " " + topping.Price}");
            
            bool succeed = await _toppingsClient.PostTopping(topping);

            if (succeed)
            {
                await Swal.FireAsync("Successfully Added", "", SweetAlertIcon.Success);
                NavigationManager.NavigateTo("/toppings/list");
            }
            else
            {
                await Swal.FireAsync("Error", "", SweetAlertIcon.Error);    
            }
            
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        finally
        {
            isSubmitting = false;
        }
    }  
    void Cancel()  
    {  
        NavigationManager.NavigateTo("/toppings/list");  
    }  
} 